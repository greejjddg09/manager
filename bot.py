import logging
import re
import os
import sqlite3
from datetime import datetime
import json

import gspread
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# ‚úÖ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–∞ —Ç–∏–ø–∞ Credentials
from google.oauth2.credentials import Credentials as UserCredentials
from google.oauth2.service_account import Credentials as ServiceCredentials

from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
from googleapiclient.discovery import build

from pyowm import OWM
from pyowm.utils.config import get_default_config



# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
SPREADSHEET_ID = "1tEkPxovVUmi3HwwnG-92LmsSB9RhqYczh_jrmlY-7KU"

creds_json = os.getenv("SHEETS_CREDENTIALS")
creds_dict = json.loads(creds_json)
gc = gspread.service_account_from_dict(creds_dict)
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))  # —Ç–≤–æ–π chat_id (—É–∑–Ω–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ /id)
OWM_API_KEY = os.getenv("OWM_API_KEY")

# OWM (–ø–æ–≥–æ–¥–∞)
if not OWM_API_KEY:
    print("‚ö†Ô∏è OWM_API_KEY –Ω–µ –∑–∞–¥–∞–Ω, –∫–æ–º–∞–Ω–¥–∞ /weather –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
else:
    config_dict = get_default_config()
    config_dict["language"] = "ru"
    owm = OWM(OWM_API_KEY, config_dict)
    mgr = owm.weather_manager()

logging.basicConfig(level=logging.INFO)

# --- Google Calendar auth ---
# --- Google Calendar auth ---
def get_calendar_service():
    creds = None
    if os.path.exists("token.json"):
        creds = UserCredentials.from_authorized_user_file("token.json", SCOPES)

    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file("calendar_credentials.json", SCOPES)
            creds = flow.run_local_server(port=0)
        with open("token.json", "w") as token:
            token.write(creds.to_json())

    return build("calendar", "v3", credentials=creds)

# --- Google Sheets ---
# --- Google Sheets ---
from google.oauth2 import service_account

creds_json = os.getenv("SHEETS_CREDENTIALS")
if not creds_json:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è SHEETS_CREDENTIALS –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ–±–∞–≤—å –µ—ë –≤ Railway ‚Üí Settings ‚Üí Variables.")

try:
    creds_dict = json.loads(creds_json)
except json.JSONDecodeError as e:
    raise ValueError(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {e}")

# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
creds = service_account.Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
gc = gspread.authorize(creds)

SPREADSHEET_ID = "1tEkPxovVUmi3HwwnG-92LmsSB9RhqYczh_jrmlY-7KU"
sh = gc.open_by_key(SPREADSHEET_ID)
worksheet = sh.sheet1

print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")

# --- –ë–î –¥–ª—è –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π ---
def init_db():
    conn = sqlite3.connect("birthdays.db")
    cur = conn.cursor()
    cur.execute("""CREATE TABLE IF NOT EXISTS birthdays (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        date TEXT
    )""")
    conn.commit()
    conn.close()

def add_birthday(name, date):
    conn = sqlite3.connect("birthdays.db")
    cur = conn.cursor()
    cur.execute("INSERT INTO birthdays (name, date) VALUES (?, ?)", (name, date))
    conn.commit()
    conn.close()

def get_all_birthdays():
    conn = sqlite3.connect("birthdays.db")
    cur = conn.cursor()
    cur.execute("SELECT name, date FROM birthdays")
    rows = cur.fetchall()
    conn.close()
    return rows

def get_today_birthdays():
    today = datetime.now().strftime("%d.%m")
    conn = sqlite3.connect("birthdays.db")
    cur = conn.cursor()
    cur.execute("SELECT name, date FROM birthdays WHERE date = ?", (today,))
    rows = cur.fetchall()
    conn.close()
    return rows

# --- Telegram Bot ---
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())
scheduler = AsyncIOScheduler()

# --- –ö–æ–º–∞–Ω–¥–∞ /event ---
@dp.message(F.text.startswith("/event"))
async def add_event(message: types.Message):
    text = message.text.replace("/event", "").strip()
    match = re.match(r"(\d{1,2}) (\w{3}) (\d{1,2}:\d{2})-(\d{1,2}:\d{2}) (.+)", text)

    if not match:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n–ü—Ä–∏–º–µ—Ä: /event 1 Oct 9:00-10:00 –í—Å—Ç—Ä–µ—á–∞")
        return

    day, month, start_time, end_time, summary = match.groups()
    year = datetime.now().year

    start_dt = datetime.strptime(f"{day} {month} {year} {start_time}", "%d %b %Y %H:%M")
    end_dt = datetime.strptime(f"{day} {month} {year} {end_time}", "%d %b %Y %H:%M")

    service = get_calendar_service()
    event = {
        "summary": summary,
        "start": {"dateTime": start_dt.isoformat(), "timeZone": "Asia/Tashkent"},
        "end": {"dateTime": end_dt.isoformat(), "timeZone": "Asia/Tashkent"},
    }
    event = service.events().insert(calendarId="primary", body=event).execute()

    await message.answer(f"‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {event.get('htmlLink')}")

# --- –£—á—ë—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤/–¥–æ—Ö–æ–¥–æ–≤ ---
@dp.message(F.text.regexp(r"^\d+ (–¥–æ—Ö–æ–¥|—Ä–∞—Å—Ö–æ–¥) .+"))
async def handle_expense(message: types.Message):
    try:
        parts = message.text.strip().split()
        amount = parts[0]
        type_ = parts[1].lower()
        category = " ".join(parts[2:])

        date = datetime.now().strftime("%d.%m.%Y")
        worksheet.append_row([date, amount, type_, category])

        await message.answer(f"‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n<b>{amount} {type_}</b> ‚Äî {category}")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")    

# --- –ü–æ–≥–æ–¥–∞ ---
@dp.message(F.text.startswith("/weather"))
async def weather(message: types.Message):
    if not OWM_API_KEY or not mgr:
        await message.answer("‚ö†Ô∏è –ü–æ–≥–æ–¥–Ω—ã–π API-–∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å OWM_API_KEY –≤ Railway ‚Üí Settings ‚Üí Variables.")
        return

    try:
        city = message.text.replace("/weather", "").strip()
        if not city:
            await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥.\n–ü—Ä–∏–º–µ—Ä: /weather Tashkent")
            return

        observation = mgr.weather_at_place(city)
        w = observation.weather
        temp = w.temperature("celsius")["temp"]

        answer = f"üåç –ì–æ—Ä–æ–¥: {city}\n"
        answer += f"‚òÅÔ∏è –ü–æ–≥–æ–¥–∞: {w.detailed_status}\n"
        answer += f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.1f}¬∞C"

        await message.answer(answer)
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É: {e}")

# --- –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è ---
@dp.message(F.text.startswith("/bdayadd"))
async def bday_add(message: types.Message):
    try:
        parts = message.text.split()
        if len(parts) < 3:
            await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /bdayadd –ò–º—è –î–î.–ú–ú\n–ü—Ä–∏–º–µ—Ä: /bdayadd –í–∞—Å—è 01.10")
            return
        name = " ".join(parts[1:-1])
        date = parts[-1]
        add_birthday(name, date)
        await message.answer(f"‚úÖ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {name} ({date}) –¥–æ–±–∞–≤–ª–µ–Ω")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

@dp.message(F.text == "/bdays")
async def bday_list(message: types.Message):
    rows = get_all_birthdays()
    if not rows:
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
    else:
        text = "üéÇ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:\n"
        for name, date in rows:
            text += f"- {name} üéÇ {date}\n"
        await message.answer(text)

# --- –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –î–† –≤ 00:00 ---
async def check_birthdays():
    rows = get_today_birthdays()
    if rows and ADMIN_CHAT_ID != 0:
        text = "üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É:\n"
        for name, date in rows:
            text += f"- {name} üéÇ {date}\n"
        await bot.send_message(ADMIN_CHAT_ID, text)

scheduler.add_job(check_birthdays, "cron", hour=0, minute=0)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    import asyncio

    init_db()

    async def main():
        scheduler.start()
        await dp.start_polling(bot)

    asyncio.run(main())
